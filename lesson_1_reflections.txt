How did viewing a diff between two versions of a file help you see the bug that 
was introduced?

    

I was able to spot differences in large files very quickly.  



How could having easy access to the entire history of a file make you a more 
efficient programmer in the long term?

    

Having multiple versions of a document, or document history, allows me to go back to previous versions quickly.  This can make me a more efficient programmer in the long term because I can quickly reverse changes to a program by going back to a previous version.



What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    

The cons of not having automatic saving is that the user might forget to create a commit at regular intervals.  However the pro of manually creating commits is that they will be created at times that make sense.  That is the commits should be created when there is a substantial and logical change in the program or file.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    

In google docs, each file is separate and so it makes sense to have individual saves.  In git, however, several files might be related to the same program.  For example a css file, and html file, etc.  It would be nice to track when any changes are made to the entire project, so that you have a snapshot in time of the entire program project.



How can you use the commands git log and git diff to view the history of files?

    

git log tells you what changes were made to a git repository.  Once you have the commit ids for the changes, you can use git diff to determine the differences between two commits.

How might using version control make you more confident to make changes that
could break something?

    

If using version control, you can always go back to a previous version of the software to fix any bugs that are created.  Also, you can make bigger changes without worrying.

Now that you have your workspace set up, what do you want to try using Git for?

    

I'd like to use git to find and fix bugs in software.

